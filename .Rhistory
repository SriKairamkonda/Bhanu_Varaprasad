r_squared <- 1 - mse / var(test_data$MEDV)
print(paste("Mean Squared Error:", mse))
print(paste("R-squared:", r_squared))
# Visualization 1: Scatter plot of actual vs. predicted values
ggplot(data = test_data, aes(x = MEDV, y = predictions)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
# Visualization 2: Feature Importance Plot
feature_importance <- xgb.importance(model = xgb_model)
xgb.plot.importance(importance_matrix = feature_importance)
compare_models <- function(model, test_data) {
# Make predictions on the test set
predictions <- predict(model, newdata = test_data)
# Evaluate the model
mse <- mean((predictions - test_data$MEDV)^2)
r_squared <- 1 - mse / var(test_data$MEDV)
# Print evaluation metrics
print(paste("Mean Squared Error:", mse))
print(paste("R-squared:", r_squared))
# Visualization: Scatter plot of actual vs. predicted values
ggplot(data = test_data, aes(x = MEDV, y = predictions)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
}
# Compare XGBoost model
print("XGBoost Model:")
compare_models(xgb_model, test_data)
compare_models <- function(model, test_data) {
# Convert test data to matrix
test_matrix <- as.matrix(test_data[, colnames(test_data) != "MEDV"])
# Create xgb.DMatrix for prediction
xgb_test_data <- xgb.DMatrix(test_matrix)
# Make predictions on the test set
predictions <- predict(model, newdata = xgb_test_data)
# Evaluate the model
mse <- mean((predictions - test_data$MEDV)^2)
r_squared <- 1 - mse / var(test_data$MEDV)
# Print evaluation metrics
print(paste("Mean Squared Error:", mse))
print(paste("R-squared:", r_squared))
# Visualization: Scatter plot of actual vs. predicted values
ggplot(data = test_data, aes(x = MEDV, y = predictions)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
}
# Compare XGBoost model
print("XGBoost Model:")
compare_models(xgb_model, test_data)
# Compare Random Forest model
print("Random Forest Model:")
compare_models(rf_model, test_data)
library(xgboost)
library(randomForest)
library(ggplot2)
# Load and preprocess the data
data <- na.omit(read.csv("C:/Users/HP/Downloads/HousingData.csv"))
set.seed(42)
indices <- sample(1:nrow(data), 0.8 * nrow(data))
train_data <- data[indices, ]
test_data <- data[-indices, ]
# Model A: XGBoost
xgb_model <- xgboost(data = as.matrix(train_data[, colnames(train_data) != "MEDV"]), label = train_data$MEDV, nrounds = 100, objective = "reg:squarederror")
predictions_xgb <- predict(xgb_model, as.matrix(test_data[, colnames(test_data) != "MEDV"]))
mse_xgb <- mean((predictions_xgb - test_data$MEDV)^2)
# Model B: Random Forest
rf_model <- randomForest(MEDV ~ ., data = train_data, ntree = 100)
predictions_rf <- predict(rf_model, newdata = test_data)
mse_rf <- mean((predictions_rf - test_data$MEDV)^2)
# Comparative Analysis
print("XGBoost Model Metrics:")
print(paste("Mean Squared Error:", mse_xgb))
print("Random Forest Model Metrics:")
print(paste("Mean Squared Error:", mse_rf))
# Comparative Scatter Plots
plot_xgb <- ggplot(data = test_data, aes(x = MEDV, y = predictions_xgb)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "XGBoost - Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
plot_rf <- ggplot(data = test_data, aes(x = MEDV, y = predictions_rf)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Random Forest - Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
# Display Plots
print("Comparative Scatter Plots:")
print(plot_xgb)
print(plot_rf)
library(xgboost)
library(randomForest)
library(ggplot2)
# Load and preprocess the data
data <- na.omit(read.csv("C:/Users/HP/Downloads/HousingData.csv"))
set.seed(42)
indices <- sample(1:nrow(data), 0.8 * nrow(data))
train_data <- data[indices, ]
test_data <- data[-indices, ]
# Model A: XGBoost
xgb_model <- xgboost(data = as.matrix(train_data[, colnames(train_data) != "MEDV"]), label = train_data$MEDV, nrounds = 100, objective = "reg:squarederror")
predictions_xgb <- predict(xgb_model, as.matrix(test_data[, colnames(test_data) != "MEDV"]))
mse_xgb <- mean((predictions_xgb - test_data$MEDV)^2)
# Model B: Random Forest
rf_model <- randomForest(MEDV ~ ., data = train_data, ntree = 100)
predictions_rf <- predict(rf_model, newdata = test_data)
mse_rf <- mean((predictions_rf - test_data$MEDV)^2)
# Comparative Analysis
print("XGBoost Model Metrics:")
print(paste("Mean Squared Error:", mse_xgb))
print("Random Forest Model Metrics:")
print(paste("Mean Squared Error:", mse_rf))
# Comparative Scatter Plots
plot_xgb <- ggplot(data = test_data, aes(x = MEDV, y = predictions_xgb)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "XGBoost - Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
plot_rf <- ggplot(data = test_data, aes(x = MEDV, y = predictions_rf)) +
geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Random Forest - Actual vs. Predicted Values",
x = "Actual Values",
y = "Predicted Values")
# Display Plots
print("Comparative Scatter Plots:")
print(plot_xgb)
print(plot_rf)
WineQT <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
View(WineQT)
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
ggplot(wine_data[, subset_vars], aes(x = quality)) +
geom_point(aes(color = quality)) +
geom_density_2d() +
labs(title = "Pair Plots of Selected Variables")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
ggplot(wine_data[, subset_vars], aes(x = quality)) +
geom_point(aes(color = quality)) +
geom_density_2d() +
labs(title = "Pair Plots of Selected Variables")
colnames(wine_data)
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Pair plots for a subset of variables
ggplot(wine_data, aes(x = quality)) +
geom_point(aes(color = as.factor(quality)), data = wine_data[, subset_vars]) +
geom_density_2d(data = wine_data[, subset_vars]) +
labs(title = "Pair Plots of Selected Variables")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Pair plots for a subset of variables
ggplot(wine_data, aes(x = quality)) +
geom_point(aes(color = as.factor(quality)), data = wine_data[, subset_vars]) +
labs(title = "Pair Plots of Selected Variables")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Scatter plot matrix for a subset of variables
pairs(wine_data[, subset_vars], pch = 16, col = as.factor(wine_data$quality))
# Correlation heatmap
library(corrplot)
corrplot(cor(wine_data[, 1:11]), method = "color")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Scatter plot matrix for a subset of variables
pairs(wine_data[, subset_vars], pch = 16, col = as.factor(wine_data$quality))
# Correlation heatmap
library(corrplot)
corrplot(cor(wine_data[, 1:11]), method = "color")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Scatter plot matrix for a subset of variables
pairs(wine_data[, subset_vars], pch = 16, col = as.factor(wine_data$quality))
# Correlation heatmap
library(corrplot)
corrplot(cor(wine_data[, 1:11]), method = "color")
# Load required libraries
library(ggplot2)
# Load the dataset
wine_data <- read.csv("C:/Users/HP/Downloads/WineQT.csv")
# Explore the structure of the dataset
str(wine_data)
# Display summary statistics
summary(wine_data)
# Check for missing values
sum(is.na(wine_data))
# Data visualization for each feature
# You can customize the plots based on your preferences and requirements
# Box plots for each input variable
for (col in 1:11) {
ggplot(wine_data, aes(x = quality, y = wine_data[, col])) +
geom_boxplot(fill = "skyblue", color = "steelblue") +
labs(title = paste("Box plot of", names(wine_data)[col]))
}
# Correlation matrix
cor_matrix <- cor(wine_data[, 1:11])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 10, hjust = 1))
# Histogram of the target variable (quality)
ggplot(wine_data, aes(x = quality)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "steelblue") +
labs(title = "Histogram of Wine Quality")
# Class distribution bar plot
ggplot(wine_data, aes(x = as.factor(quality), fill = as.factor(quality))) +
geom_bar() +
labs(title = "Class Distribution of Wine Quality")
# Pair plots for a subset of variables
# You can customize the subset based on your preferences
subset_vars <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "quality")
# Replace spaces in column names with dots and use backticks
colnames(wine_data) <- gsub(" ", ".", colnames(wine_data))
# Check the column names to ensure they match with the actual names in your dataset
colnames(wine_data)
# Subset of variables for pair plots
subset_vars <- c("fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "quality")
# Scatter plot matrix for a subset of variables
pairs(wine_data[, subset_vars], pch = 16, col = as.factor(wine_data$quality))
# Correlation heatmap
library(corrplot)
corrplot(cor(wine_data[, 1:11]), method = "color")
